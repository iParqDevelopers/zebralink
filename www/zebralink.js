/**
 * PhoneGap is available under *either* the terms of the modified BSD license *or* the
 * MIT License (2008). See http://opensource.org/licenses/alphabetical for full text.
 *
 * Copyright (c) Meijun 2016
 * Copyright (c) Todd Blanchard 2010
 * Copyright (c) 2010, iNET Inc.
 */

cordova.define("cordova/plugins/zebralink",
  function(require, exports, module) {
    var exec = require("cordova/exec");
	var ZebraLink = function() {};
	var classname = "ZebraLink";

//-------------------------------------------------------------------

	/*
	*	In case of error, plugin will call fail callback and pass an error object to app.
	* Error object looks like this:
	*  	{
	*     code : number
	*     message : string
	*   }
	*
	* Error code are:
	* 	BluetoothNotSupportedCode = 1001
	* 	BluetoothDisabledCode = 1002
	* 	LocationPermissionDeniedCode = 1003
	* 	PrinterNotReady = 2001  							(Please look at error message for more detail)
	* 	ConnectionErrorCode = 3001
	* 	InvalidArgumentCode = 4001
	* 	NoPrinterCode = 4002                  (App need to connect to printer before calling print)
	* 	OtherErrorCode = 5001                 (If you encounter this error, please report this bug to the plugin author!)
	*
	* Error code 10xx represents error that is related to user's device
	* Error code 20xx represents error that is related to a printer
	* Error code 30xx represents error that is related to connection
	* Error code 40xx represents error that is related to bad code from app side
	* Error code 50xx represents error that is related to bad code from plugin side
	*
	* Error message from 10xx to 20xx is a readable by user and can be showed directly in UI.
	* Error message from 30xx to 50xx is generated by an exception and should not be shown in UI.
	*/


	/*
	* requestLocationPermission
	*
	* This method will show a dialog asking for ACCESS_COARSE_LOCATION permission.
	*	If the permission is already granted, it will call success callback without showing the dialog.
	*
	* @param: success(permCode) , permCode is 1 if the permission is granted, otherwise 0.
	* @param: fail(error)
	*
	*	Note: In Android device, ACCESS_COARSE_LOCATION permission is required for Bluetooth discovery.
	*/
	ZebraLink.prototype.requestLocationPermission = function(success, fail, options) {
		console.log("ZebraLink.prototype.requestLocationPermission");

		if (!fail) { fail = function() {}; }

		if (typeof fail != "function")  {
			console.log("ZebraLink.requestLocationPermission failure: failure parameter not a function");
			return;
		}

		if (typeof success != "function") {
			fail("success callback parameter must be a function");
			return;
		}

		return exec(success, fail, classname, "requestPermission", [options]);
	}

	/*
	*	requestEnableBluetooth
	*
	* This method show dialog asking user to enable bluetooth.
	* seccess callback is called when user click Yes or No (or Cancel)
	*
	* If the bluetooth is already Enabled, this method will simply call success(1)
	*
	* @param success(result) result is 1 if the bluetooth is already enabled or user choose to enable, result is 0 otherwise.
	* @param fail(error)
	* @param options
	*/
	ZebraLink.prototype.requestEnableBluetooth = function(success, fail, options) {
		console.log("ZebraLink.prototype.requestEnableBluetooth");

		if (!fail) { fail = function() {}; }

		if (typeof fail != "function")  {
			console.log("ZebraLink.requestLocationPermission failure: failure parameter not a function");
			return;
		}

		if (typeof success != "function") {
			fail("success callback parameter must be a function");
			return;
		}

		return exec(success, fail, classname, "enableBluetooth", [options]);
	}

	/*
	*	discover
	*
	* This method discover nearby devices
	*
	* @param: success(printer/printers)
	*			This callback will be called everytime a single device is found. In this case, it will pass a printer object as a parameter.
	* 		Once the discovery process is finished, this callback will be called again.
	*			This time it will pass AN ARRAY of all printers objects found in the process, and pass an empty array if no printer is found.
	* @param: fail(error)
	* @param: options = {
	*							printerOnly: boolean default is true
	*																	(if false, the method will return all devices found, including non-printer devices)
	* 				}
	*
	* Printer Object: {
	*		name : string
	*   address : string  (mac address of the device)
	*   isPaired : boolean
	*   majorClass : number (Printer has major class: 1536, and minor class: 1664)
	*   minorClass : number	(https://www.bluetooth.com/specifications/assigned-numbers/baseband)
	* }
	*/
	ZebraLink.prototype.discover = function(success, fail, options)
	{

		console.log("ZebraLink.prototype.discover");

		if (!fail) { fail = function() {}; }

		if (typeof fail != "function")  {
			console.log("ZebraLink.discover failure: failure parameter not a function");
			return;
		}

		if (typeof success != "function") {
			fail("success callback parameter must be a function");
			return;
		}

		if(!options)
		{
			options = {};
		}

		return exec(success,fail, classname, "discover", [options]);
	};

	/*
	*	cancelDiscover
	*
	* This method will cancel discovery process, do nothing if the device is not discovering.
	* This method should be called as soon as the app finds a device it wants,
	* because discovery process consumes a lot of resources and can slow down connection bandwidth.
	* https://developer.android.com/guide/topics/connectivity/bluetooth.html#DiscoveringDevices
	*
	* @param success : called when disconnected
	* @param fail
	* @param options
	*/
	ZebraLink.prototype.cancelDiscover = function(success, fail, options)
	{

		console.log("ZebraLink.prototype.cancelDiscover");

		if (!fail) { fail = function() {}; }

		if (typeof fail != "function")  {
			console.log("ZebraLink.cancelDiscover failure: failure parameter not a function");
			return;
		}

		if (typeof success != "function") {
			fail("success callback parameter must be a function");
			return;
		}

		if(!options || !options.range)
		{
			options = {};
		}

		return exec(success,fail, classname, "cancelDiscover", [options]);
	};

	//-------------------------------------------------------------------

	/*
	* connect
	*
	* This method connect to the chosen device.
	* If the two devices have not been paired, the Android framework will automatically show a pairing request dialog to the user.
	* This method is required before app can call print.
	* Once the connect process is success, the plugin will cache the printer address and app is free to call print or swipe without calling this method again.
	*
	* @param success(status)
	*						status: printer status as dictionary
	* @param fail(error)
	* @param options : {
	*						address: mac address string
	* }
	*/
	ZebraLink.prototype.connect = function(success, fail, options)
	{
		console.log("ZebraLink.prototype.connect");

		if (!fail) { fail = function(error) { alert("ZebraLink.Connect failed: " + error); }; }

		if (typeof fail != "function")  {
			console.log("ZebraLink.connect failure: failure parameter not a function");
			return;
		}

		if (typeof success != "function") {
			fail("success callback parameter must be a function");
			return;
		}

		var label = options.address;
		if(options.printer && options.printer.name) { label = options.printer.name; }

		return exec(success,fail, classname, "connect", [options]);
	};

	// Deprecated
	ZebraLink.prototype.reconnect = function(success,fail,options)
	{
		console.log("ZebraLink.prototype.reconnect");

		if (!fail) { fail = function(error) { console.log('ZebraLink.reconnect failed: ' + error); }; }

		if(!success) { success = function() {}; }

		if(!options) { options = {}; }

		return exec(success, fail, classname, "connect", [options]);
	};

	/*
	* disconnect
	*
	* Disconnect the printer, also clear printer address in cache.
	* Do nothing if no printer is connected.
	*
	*	@param success
	* @param fail(error)
	* @param options
	*/
	ZebraLink.prototype.disconnect = function(success, fail, options) {
		console.log("ZebraLink.prototype.disconnect");

		if (!fail) { fail = function(error) { console.log('ZebraLink.disconnect failed: ' + error); }; }

		if(!success) { success = function() {}; }

		if(!options) { options = {}; }

		return exec(success, fail, classname, "disconnect", [options]);
	};

	/*
	*	print
	*
	* Print a receipt
	* App must call ZebraLink.connect first, so the plugin know what address to connect to.
	* This method will call fail callback if the device is not ready for printing (bluetooth is off, or the printer is too hot or out of paper).
	* This method will try to reconnect if bluetooth socket is broken.
	*
	* @param success
	* @param fail(error)
	* @param options {
             template : string
             formValues : object
           }
	*/
	ZebraLink.prototype.print = function(success,fail,options) {
		if (!fail) { fail = function() {}; }

		if (typeof fail != "function")  {
			console.log("ZebraLink.print failure: failure parameter not a function");
			return;
		}

		if (typeof success != "function") {
			fail("success callback parameter must be a function");
			return;
		}

		return exec(success, fail, classname, "print", [options]);
	};


	/*
	* swipe
	*
	* Tell printer to wait for user to swipe a card, then read the card.
	* App must call ZebraLink.connect first, so the plugin know what address to connect to.
	* App can set timeout through options parameter. fail callback will be called if no card being swiped after that time period.
	*
	* @param success("Ready"/string[])
	*						success will be called twice.
	*						success("Ready") is called when the printer is ready, and app should notify user that he can swipe the card now.
	*						success(string[]) is called when the printer finish reading data from the card.
	*						The array contains Track1, 2, and 3. See http://www.acmetech.com/documentation/credit_cards/magstripe_track_format.html.
	* @param fail(error)
	*						fail can be called either before or after success("Ready") is called.
	*	@param options {
	*						timeout : number  (default is 10000)
	*				 }
	*/
	ZebraLink.prototype.swipe = function(success,fail,options) {
		if (!fail) { fail = function() {};}

		if (typeof fail != "function")  {
			console.log("ZebraLink.currentPrinter failure: failure parameter not a function");
			return;
		}

		if (typeof success != "function") {
			fail("success callback parameter must be a function");
			return;
		}

		if(!options) { options = {}; }

		return exec(success,fail,classname, "swipe", [options]);
	};


// ===============================================================
// Deprecated Methods
// ===============================================================

	ZebraLink.prototype.watchPrinter = function(watchFunc)
	{
		if(!this._watchers)
		{
			this._watchers = {};
			this._watchIds = 1;
		}
		var ident = 'watch'+this._watchIds++;
		this._watchers[ident] = watchFunc;
	};

	ZebraLink.prototype.cancelPrinterWatch = function(identifier)
	{
		if(this._watchers && this._watchers.identifier)
		{
			this._watchers.identifier = null;
		}
	};

	ZebraLink.prototype.setPrinterStatus = function(status)
	{
		this._status = status;
		if(this._watchers)
		{
			for(var k in this._watchers)
			{
				if(this._watchers.hasOwnProperty(k) && typeof(this._watchers[k]) == 'function')
				{
					this._watchers[k](status);
				}
			}
		}
	};

	ZebraLink.prototype.check = function(success,fail)
	{
		if(!fail)
		{
			fail = function(msg) { setTimeout(function(){ alert("Printer not ready: "+msg); },1); };
		}

		if(!success)
		{
			success = function() { setTimeout(function(){alert("Printer is ready.");},1); };
		}

		return exec(success,fail,classname, "check", []);
	};

	var zebraLink = new ZebraLink();
    module.exports = zebraLink;
});
//-------------------------------------------------------------------


if(!window.plugins) {
    window.plugins = {};
}
if (!window.plugins.zebralink) {
    window.plugins.zebralink = cordova.require("cordova/plugins/zebralink");
}
